nest <- function(f, initial, reps) {
result = c()
result[1] = initial
for (i in 1:reps){
result[i+1] = f(result[i])
}
return(result)
}
p0 <- 0.5
reps <- 40
# CASE 1: directional selection in favour of homozygous individuals with
# genotype AA which corresponds to w0 > w1 > w2 in terms of parameters
w0 <- w0d1
w1 <- w1d1
w2 <- w2d1
# simulating the selection dynamics
res1 = nest(viability_selection_simulate, p0, reps)
# putting the results into a data frame
viability_selection_dynamics_result_1 <- data.frame(iter = 1:(reps+1), res1)
# plotting the results and saving the plot object
p1 <- ggplot(data = viability_selection_dynamics_result_1,
aes(x = iter, y = res1)) +
geom_line() +
labs(x = "Time (generations)",
y = "Proportion of A alleles",
title = "Directional selection, for homozygous dominant") +
scale_y_continuous(limits = c(0, 1))
p1
# CASE 2: directional selection in favour of homozygous individuals with
# genotype aa which corresponds to w0 > w1 > w2 in terms of parameters
w0 <- w0d2
w1 <- w1d2
w2 <- w2d2
# simulating the selection dynamics
res2 = nest(viability_selection_simulate, p0, reps)
# putting the results into a data frame
viability_selection_dynamics_result_2 <- data.frame(iter = 1:(reps+1), res2)
# plotting the results and saving the plot object
p2 <- ggplot(data = viability_selection_dynamics_result_2,
aes(x = iter, y = res2)) +
geom_line() +
labs(x = "Time (generations)",
y = "Proportion of A alleles",
title = "Directional selection, for homozygous recessive") +
scale_y_continuous(limits = c(0, 1))
p2
# CASE 3: overdominant selection in favour of heterozygous individuals with
# genotype aa which corresponds to w1 > w0 and w1 > w2 in terms of parameters
w0 <- w0over
w1 <- w1over
w2 <- w2over
# simulating the selection dynamics
res3 = nest(viability_selection_simulate, p0, reps)
# putting the results into a data frame
viability_selection_dynamics_result_3 <- data.frame(iter = 1:(reps+1), res3)
# plotting the results and saving the plot object
p3 <- ggplot(data = viability_selection_dynamics_result_3,
aes(x = iter, y = res3)) +
geom_line() +
labs(x = "Time (generations)",
y = "Proportion of A alleles",
title = "Overdominant selection") +
scale_y_continuous(limits = c(0, 1))
p3
# CASE 4: underdominant selection in favour of heterozygous individuals with
# genotype aa which corresponds to w1 < w0 and w1 < w2 in terms of parameters
w0 <- w0under
w1 <- w1under
w2 <- w2under
# simulating the selection dynamics
res4 = nest(viability_selection_simulate, p0, reps)
# putting the results into a data frame
viability_selection_dynamics_result_4 <- data.frame(iter = 1:(reps+1), res4)
# plotting the results and saving the plot object
p4 <- ggplot(data = viability_selection_dynamics_result_4,
aes(x = iter, y = res4)) +
geom_line() +
labs(x = "Time (generations)",
y = "Proportion of A alleles",
title = "Underdominant selection") +
scale_y_continuous(limits = c(0, 1))
p4
# plotting all four plot objects together
(p1 + p2)/(p3 + p4)
# CASE 2: directional selection in favour of homozygous individuals with
# genotype aa which corresponds to w0 > w1 > w2 in terms of parameters
w0 <- w0d2
w1 <- w1d2
# CASE 2: directional selection in favour of homozygous individuals with
# genotype aa which corresponds to w0 > w1 > w2 in terms of parameters
w0d2 <- 0.5
w1d2 <- 0.7
w2d2 <- 0.9
plot(p, viability_selection_next_gen(p, w0d2, w1d2, w2d2),
ylab = "Change in p in the next generation")
mtcars[1:n-1]
mtcars[-1;]
mtcars[-1:]
mtcars[-1:,]
mtcars
nrow(mtcars)
mtcars[1:n(mtcars)-1]
mtcars[1:nrow(mtcars)-1]
mtcars[1:nrow(mtcars)-1,]
library(EpiEstim)
install.packages("EpiEstim")
library(EpiEstim)
library(ggplot2)
## load data
data(Flu2009)
## incidence:
head(Flu2009$incidence)
#>        dates I
#> 1 2009-04-27 1
#> 2 2009-04-28 1
#> 3 2009-04-29 0
#> 4 2009-04-30 2
#> 5 2009-05-01 5
#> 6 2009-05-02 3
## serial interval (SI) distribution:
Flu2009$si_distr
#>  [1] 0.000 0.233 0.359 0.198 0.103 0.053 0.027 0.014 0.007 0.003 0.002 0.001
## interval-ceonsored serial interval data:
## each line represents a transmission event,
## EL/ER show the lower/upper bound of the symptoms onset date in the infector
## SL/SR show the same for the secondary case
## type has entries 0 corresponding to doubly interval-censored data
## (see Reich et al. Statist. Med. 2009).
head(Flu2009$si_data)
library(incidence)
plot(as.incidence(Flu2009$incidence$I, dates = Flu2009$incidence$dates))
View(Flu2009)
std_si = 1.5))
res_parametric_si <- estimate_R(Flu2009$incidence,
method="parametric_si",
config = make_config(list(
mean_si = 2.6,
std_si = 1.5))
)
head(res_parametric_si$R)
plot(res_parametric_si, legend = FALSE)
discr_si(0:20, mu = 2.6, sigma = 1.5)
## we choose to draw:
## - the mean of the SI in a Normal(2.6, 1), truncated at 1 and 4.2
## - the sd of the SI in a Normal(1.5, 0.5), truncated at 0.5 and 2.5
config <- make_config(list(mean_si = 2.6, std_mean_si = 1,
min_mean_si = 1, max_mean_si = 4.2,
std_si = 1.5, std_std_si = 0.5,
min_std_si = 0.5, max_std_si = 2.5))
res_uncertain_si <- estimate_R(Flu2009$incidence,
method = "uncertain_si",
config = config)
plot(res_uncertain_si, legend = FALSE)
## interval-ceonsored serial interval data:
## each line represents a transmission event,
## EL/ER show the lower/upper bound of the symptoms onset date in the infector
## SL/SR show the same for the secondary case
## type has entries 0 corresponding to doubly interval-censored data
## (see Reich et al. Statist. Med. 2009).
head(Flu2009$si_data)
x <- c(12L, 15L, 22L)
median(x)
class(median(x))
a <- c(3,0, T)
b <- c(4, 0 , FALSE)
c <- (a|b)
c
x <- as.Date("01-10-2018")
month(x)
as.month(x)
months(x)
a <- list("10", TRUE, 5.6)
is.character(a[1])
is.numeric(a[1])
is.list(a[1])
names(v) <- c("a", "b", "c")
v <- 1:3
names(v) <- c("a", "b", "c")
v[4] <- 4
names(v[4])
names(v)
df <- read.txt('RNAMonitoring.txt', encoding = 'utf16', "\t"))
df <- read.txt('RNAMonitoring.txt', encoding = 'utf16', "\t")
df <- read_txt('RNAMonitoring.txt', encoding = 'utf16', "\t")
df <- read.delim('RNAMonitoring.txt', encoding = 'utf16', "\t")
library(tidyverse)
library(tidyverse)
setwd("/Users/FM/Public/HDS/Summer Project/rtestww")
colnames(df)
df
# Read in file
df <- read.table('RNAMonitoring.txt', encoding = 'utf16', "\t")
df
# Read in file
df <- read.table('RNAMonitoring.txt', encoding = 'utf16', sep="\t")
df
# Read in file
df <- read.table('RNAMonitoring.txt', header = TRUE, encoding = 'utf16', sep="\t")
# Read in file
df <- read.table('RNAMonitoring.txt', header = TRUE, sep="\t")
# Read in file
df <- read.csv('RNAMonitoring.txt', header = TRUE, encoding = 'utf16', sep="\t")
# Read in file
df <- read.csv('RNAMonitoring.txt', header = TRUE, fileEncoding = 'utf16', sep="\t")
# Read in file
df <- read.csv('RNAMonitoring.txt', header = TRUE, fileEncoding = 'utf-16', sep="\t")
df
head(df)
colnames(df)
colnames(df) <- c('sitecode', 'date', 'popband', 'pop', 'result_desc', 'gene', 'days_sampled')
is.na(df)
sum(is.na(df))
unique(df['gene'])
unique(df['sitecode'])
ggplot(df,aes(x=date,y=gene)) +
geom_point()
# Overall viral RNA level over time
ggplot(df,aes(x = date,
y = gene,
group = sitecode)) +
geom_point()
# Overall viral RNA level over time
ggplot(df,aes(x = date,
y = gene,
group = sitecode,
color = sitecode)) +
geom_point()
# Overall viral RNA level over time
ggplot(df,aes(x = date,
y = gene,
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE)
#
ggplot(df,aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE)
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")),
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30"))
#
ggplot(df,aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
#
ggplot(df,aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
range(df['date'])
summary(df)
head(df)
# convert date
df[date] <- dmy(df[date])
# convert date
df[date] <- lubrdate:dmy(df[date])
# convert date
df[date] <- lubrdate::dmy(df[date])
# convert date
df[date] <- lubridate::dmy(df[date])
# convert date
df$date <- as.Date(df$date, "%d/%m/%y")
summary(df)
pop <- as.numeric(pop)
df$pop <- as.numeric(df$pop)
summary(df)
df$popband <- as.factor(df$popband)
summary(df)
# Specify factor variables and convert
factor_vars <- c('popband', 'result_desc')
df <- map(df, ~.x %>% mutate(across(any_of(factor_vars), as_factor)))
df <- map(df, ~.x %>% mutate(across(any_of(factor_vars), as_factor)))
# Read in file
df <- read.csv('RNAMonitoring.txt', header = TRUE, fileEncoding = 'utf-16', sep="\t")
head(df)
# Convert data types
df$date <- as.Date(df$date, "%d/%m/%y")
df$pop <- as.numeric(df$pop)
# Read in file
df <- read.csv('RNAMonitoring.txt', header = TRUE, fileEncoding = 'utf-16', sep="\t")
head(df)
colnames(df) <- c('sitecode', 'date', 'popband', 'pop', 'result_desc', 'gene', 'days_sampled')
summary(df)
# Convert data types
df$date <- as.Date(df$date, "%d/%m/%y")
df$pop <- as.numeric(df$pop)
# Specify factor variables and convert
factor_vars <- c('popband', 'result_desc')
df <- map(df, ~.x %>% mutate(across(any_of(factor_vars), as_factor)))
names(df)
names(df) <- c('sitecode', 'date', 'popband', 'pop', 'result_desc', 'gene', 'days_sampled')
summary(df)
# Specify factor variables and convert
factor_vars <- c('popband', 'result_desc')
df <- map(df, ~.x %>% mutate(across(any_of(factor_vars), as_factor)))
# Specify factor variables and convert
factor_vars <- c('popband')
df <- map(df, ~.x %>% mutate(across(any_of(factor_vars), as_factor)))
df <- sapply(df['factor_vars'], as_factor))
df <- sapply(df['factor_vars'], as_factor)
# Specify factor variables and convert
factor_vars <- c('popband', 'result_desc')
df <- sapply(df[factor_vars], as_factor)
summary(df)
# Read in file
df <- read.csv('RNAMonitoring.txt', header = TRUE, fileEncoding = 'utf-16', sep="\t")
head(df)
names(df) <- c('sitecode', 'date', 'popband', 'pop', 'result_desc', 'gene', 'days_sampled')
summary(df)
# Convert data types
df$date <- as.Date(df$date, "%d/%m/%y")
df$pop <- as.numeric(df$pop) # 123 NAs introduced by coercion
# Specify factor variables and convert
factor_vars <- c('popband', 'result_desc')
df[factor_vars] <- sapply(df[factor_vars], as.factor)
summary(df)
df[factor_vars] <- sapply(df[factor_vars], factor)
summary(df)
# Specify factor variables and convert
factor_vars <- c("popband", "result_desc")
df[factor_vars] <- sapply(df[factor_vars], factor)
summary(df)
# Specify factor variables and convert
factor_vars <- c("popband", "result_desc")
df[factor_vars] <- sapply(df[factor_vars], as.factor())
df[factor_vars] <- sapply(df[factor_vars], as.factor
df[factor_vars] <- sapply(df[factor_vars], as.factor)
# Specify factor variables and convert
factor_vars <- c("popband", "result_desc")
df[factor_vars] <- sapply(df[factor_vars], as.factor)
summary(df)
df$factor_vars <- sapply(df$factor_vars, as.factor)
df[factor_vars] <- sapply(df[factor_vars], as.factor)
summary(df)
df %<>% mutate_at(factor_vars, as.factor)
library(magrittr)
df %<>% mutate_at(factor_vars, as.factor)
summary(df)
# Raw viral RNA level over time
ggplot(df,aes(x = date,
y = gene,
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE)
# Log RNA level over time
ggplot(df,aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
# Log RNA level over time
ggplot(df,aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
geom_smooth() +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
# Log RNA level over time
ggplot(df,aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
geom_smooth() +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
# Log RNA level over time
ggplot(df,aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
geom_smooth() +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
# Log RNA level over time
ggplot(df,aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
geom_smooth(show.legend = FALSE) +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
# Log RNA level over time
ggplot(data = subset (df, sitecode %in% sitecode [1:5]),
aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
geom_smooth(show.legend = FALSE) +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
# Log RNA level over time
ggplot(data = subset (df, sitecode %in% sitecode [1:5]),
aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
# Subset data
Sites <- df$sitecode [order (df$sitecode, decreasing = TRUE)]
ggplot(data = subset (df, sitecode %in% Sites [1:5]),
aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
# Subset data
Sites <- df$sitecode [order (unique(df$sitecode), decreasing = TRUE)]
ggplot(data = subset (df, sitecode %in% Sites [1:5]),
aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
Site
Sites
# Subset data
Sites <- df$sitecode [order (distinct(df$sitecode), decreasing = TRUE)]
Sites
# Subset data
Sites <- df$sitecode [unique(df$sitecode)]
Sites
# Subset data
Sites <- unique(df$sitecode)
Sites
ggplot(data = subset (df, sitecode %in% Sites [1:5]),
aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
# Subset data
Sites <- unique(df$sitecode)
ggplot(data = subset (df, sitecode %in% Sites [1:5]),
aes(x = date,
y = gene,
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
# Viral RNA level (log) over time
ggplot(df,aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE)
ggplot(data = subset (df, sitecode %in% Sites [1:5]),
aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
# Plot subset data from Jun-Sep 2021
ggplot(data = subset (df, sitecode %in% Sites [-1:-5]),
aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
# Plot subset data from Jun-Sep 2021
ggplot(data = subset (df, sitecode %in% Sites [2:5]),
aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
# Plot subset data from Jun-Sep 2021
ggplot(data = subset (df, sitecode %in% Sites [2:10]),
aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
# Plot subset data from Jun-Sep 2021
ggplot(data = subset (df, sitecode %in% Sites [2:9]),
aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
# Plot subset data from Jun-Sep 2021
ggplot(data = subset (df, sitecode %in% Sites [2:7]),
aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
scale_x_date(limits = c(as.Date("2020-06-01"), as.Date("2021-09-30")))
# Plot subset data from Jul 2020 to Mar 2021
ggplot(data = subset (df, sitecode %in% Sites [2:7]),
aes(x = date,
y = log(gene),
group = sitecode,
color = sitecode)) +
geom_line(show.legend = FALSE) +
scale_x_date(limits = c(as.Date("2020-07-01"), as.Date("2021-03-31")))
